# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_jplephswig', [dirname(__file__)])
        except ImportError:
            import _jplephswig
            return _jplephswig
        if fp is not None:
            try:
                _mod = imp.load_module('_jplephswig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _jplephswig = swig_import_helper()
    del swig_import_helper
else:
    import _jplephswig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _jplephswig.new_doublep()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jplephswig.delete_doublep
    __del__ = lambda self : None;
    def assign(self, *args): return _jplephswig.doublep_assign(self, *args)
    def value(self): return _jplephswig.doublep_value(self)
    def cast(self): return _jplephswig.doublep_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _jplephswig.doublep_frompointer
    if _newclass:frompointer = staticmethod(_jplephswig.doublep_frompointer)
doublep_swigregister = _jplephswig.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(*args):
  return _jplephswig.doublep_frompointer(*args)
doublep_frompointer = _jplephswig.doublep_frompointer

class floatp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _jplephswig.new_floatp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jplephswig.delete_floatp
    __del__ = lambda self : None;
    def assign(self, *args): return _jplephswig.floatp_assign(self, *args)
    def value(self): return _jplephswig.floatp_value(self)
    def cast(self): return _jplephswig.floatp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _jplephswig.floatp_frompointer
    if _newclass:frompointer = staticmethod(_jplephswig.floatp_frompointer)
floatp_swigregister = _jplephswig.floatp_swigregister
floatp_swigregister(floatp)

def floatp_frompointer(*args):
  return _jplephswig.floatp_frompointer(*args)
floatp_frompointer = _jplephswig.floatp_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _jplephswig.new_intp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jplephswig.delete_intp
    __del__ = lambda self : None;
    def assign(self, *args): return _jplephswig.intp_assign(self, *args)
    def value(self): return _jplephswig.intp_value(self)
    def cast(self): return _jplephswig.intp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _jplephswig.intp_frompointer
    if _newclass:frompointer = staticmethod(_jplephswig.intp_frompointer)
intp_swigregister = _jplephswig.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(*args):
  return _jplephswig.intp_frompointer(*args)
intp_frompointer = _jplephswig.intp_frompointer

class charp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _jplephswig.new_charp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jplephswig.delete_charp
    __del__ = lambda self : None;
    def assign(self, *args): return _jplephswig.charp_assign(self, *args)
    def value(self): return _jplephswig.charp_value(self)
    def cast(self): return _jplephswig.charp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _jplephswig.charp_frompointer
    if _newclass:frompointer = staticmethod(_jplephswig.charp_frompointer)
charp_swigregister = _jplephswig.charp_swigregister
charp_swigregister(charp)

def charp_frompointer(*args):
  return _jplephswig.charp_frompointer(*args)
charp_frompointer = _jplephswig.charp_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _jplephswig.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jplephswig.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _jplephswig.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _jplephswig.doubleArray___setitem__(self, *args)
    def cast(self): return _jplephswig.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _jplephswig.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_jplephswig.doubleArray_frompointer)
doubleArray_swigregister = _jplephswig.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _jplephswig.doubleArray_frompointer(*args)
doubleArray_frompointer = _jplephswig.doubleArray_frompointer

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _jplephswig.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jplephswig.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _jplephswig.floatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _jplephswig.floatArray___setitem__(self, *args)
    def cast(self): return _jplephswig.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _jplephswig.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_jplephswig.floatArray_frompointer)
floatArray_swigregister = _jplephswig.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  return _jplephswig.floatArray_frompointer(*args)
floatArray_frompointer = _jplephswig.floatArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _jplephswig.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jplephswig.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _jplephswig.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _jplephswig.intArray___setitem__(self, *args)
    def cast(self): return _jplephswig.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _jplephswig.intArray_frompointer
    if _newclass:frompointer = staticmethod(_jplephswig.intArray_frompointer)
intArray_swigregister = _jplephswig.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _jplephswig.intArray_frompointer(*args)
intArray_frompointer = _jplephswig.intArray_frompointer

class charArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _jplephswig.new_charArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jplephswig.delete_charArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _jplephswig.charArray___getitem__(self, *args)
    def __setitem__(self, *args): return _jplephswig.charArray___setitem__(self, *args)
    def cast(self): return _jplephswig.charArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _jplephswig.charArray_frompointer
    if _newclass:frompointer = staticmethod(_jplephswig.charArray_frompointer)
charArray_swigregister = _jplephswig.charArray_swigregister
charArray_swigregister(charArray)

def charArray_frompointer(*args):
  return _jplephswig.charArray_frompointer(*args)
charArray_frompointer = _jplephswig.charArray_frompointer

MAX_KERNEL_SIZE = _jplephswig.MAX_KERNEL_SIZE
class jpl_eph_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jpl_eph_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jpl_eph_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ephem_start"] = _jplephswig.jpl_eph_data_ephem_start_set
    __swig_getmethods__["ephem_start"] = _jplephswig.jpl_eph_data_ephem_start_get
    if _newclass:ephem_start = _swig_property(_jplephswig.jpl_eph_data_ephem_start_get, _jplephswig.jpl_eph_data_ephem_start_set)
    __swig_setmethods__["ephem_end"] = _jplephswig.jpl_eph_data_ephem_end_set
    __swig_getmethods__["ephem_end"] = _jplephswig.jpl_eph_data_ephem_end_get
    if _newclass:ephem_end = _swig_property(_jplephswig.jpl_eph_data_ephem_end_get, _jplephswig.jpl_eph_data_ephem_end_set)
    __swig_setmethods__["ephem_step"] = _jplephswig.jpl_eph_data_ephem_step_set
    __swig_getmethods__["ephem_step"] = _jplephswig.jpl_eph_data_ephem_step_get
    if _newclass:ephem_step = _swig_property(_jplephswig.jpl_eph_data_ephem_step_get, _jplephswig.jpl_eph_data_ephem_step_set)
    __swig_setmethods__["ncon"] = _jplephswig.jpl_eph_data_ncon_set
    __swig_getmethods__["ncon"] = _jplephswig.jpl_eph_data_ncon_get
    if _newclass:ncon = _swig_property(_jplephswig.jpl_eph_data_ncon_get, _jplephswig.jpl_eph_data_ncon_set)
    __swig_setmethods__["au"] = _jplephswig.jpl_eph_data_au_set
    __swig_getmethods__["au"] = _jplephswig.jpl_eph_data_au_get
    if _newclass:au = _swig_property(_jplephswig.jpl_eph_data_au_get, _jplephswig.jpl_eph_data_au_set)
    __swig_setmethods__["emrat"] = _jplephswig.jpl_eph_data_emrat_set
    __swig_getmethods__["emrat"] = _jplephswig.jpl_eph_data_emrat_get
    if _newclass:emrat = _swig_property(_jplephswig.jpl_eph_data_emrat_get, _jplephswig.jpl_eph_data_emrat_set)
    __swig_setmethods__["ipt"] = _jplephswig.jpl_eph_data_ipt_set
    __swig_getmethods__["ipt"] = _jplephswig.jpl_eph_data_ipt_get
    if _newclass:ipt = _swig_property(_jplephswig.jpl_eph_data_ipt_get, _jplephswig.jpl_eph_data_ipt_set)
    __swig_setmethods__["ephemeris_version"] = _jplephswig.jpl_eph_data_ephemeris_version_set
    __swig_getmethods__["ephemeris_version"] = _jplephswig.jpl_eph_data_ephemeris_version_get
    if _newclass:ephemeris_version = _swig_property(_jplephswig.jpl_eph_data_ephemeris_version_get, _jplephswig.jpl_eph_data_ephemeris_version_set)
    __swig_setmethods__["kernel_size"] = _jplephswig.jpl_eph_data_kernel_size_set
    __swig_getmethods__["kernel_size"] = _jplephswig.jpl_eph_data_kernel_size_get
    if _newclass:kernel_size = _swig_property(_jplephswig.jpl_eph_data_kernel_size_get, _jplephswig.jpl_eph_data_kernel_size_set)
    __swig_setmethods__["recsize"] = _jplephswig.jpl_eph_data_recsize_set
    __swig_getmethods__["recsize"] = _jplephswig.jpl_eph_data_recsize_get
    if _newclass:recsize = _swig_property(_jplephswig.jpl_eph_data_recsize_get, _jplephswig.jpl_eph_data_recsize_set)
    __swig_setmethods__["ncoeff"] = _jplephswig.jpl_eph_data_ncoeff_set
    __swig_getmethods__["ncoeff"] = _jplephswig.jpl_eph_data_ncoeff_get
    if _newclass:ncoeff = _swig_property(_jplephswig.jpl_eph_data_ncoeff_get, _jplephswig.jpl_eph_data_ncoeff_set)
    __swig_setmethods__["swap_bytes"] = _jplephswig.jpl_eph_data_swap_bytes_set
    __swig_getmethods__["swap_bytes"] = _jplephswig.jpl_eph_data_swap_bytes_get
    if _newclass:swap_bytes = _swig_property(_jplephswig.jpl_eph_data_swap_bytes_get, _jplephswig.jpl_eph_data_swap_bytes_set)
    __swig_setmethods__["curr_cache_loc"] = _jplephswig.jpl_eph_data_curr_cache_loc_set
    __swig_getmethods__["curr_cache_loc"] = _jplephswig.jpl_eph_data_curr_cache_loc_get
    if _newclass:curr_cache_loc = _swig_property(_jplephswig.jpl_eph_data_curr_cache_loc_get, _jplephswig.jpl_eph_data_curr_cache_loc_set)
    __swig_setmethods__["pvsun"] = _jplephswig.jpl_eph_data_pvsun_set
    __swig_getmethods__["pvsun"] = _jplephswig.jpl_eph_data_pvsun_get
    if _newclass:pvsun = _swig_property(_jplephswig.jpl_eph_data_pvsun_get, _jplephswig.jpl_eph_data_pvsun_set)
    __swig_setmethods__["cache"] = _jplephswig.jpl_eph_data_cache_set
    __swig_getmethods__["cache"] = _jplephswig.jpl_eph_data_cache_get
    if _newclass:cache = _swig_property(_jplephswig.jpl_eph_data_cache_get, _jplephswig.jpl_eph_data_cache_set)
    __swig_setmethods__["iinfo"] = _jplephswig.jpl_eph_data_iinfo_set
    __swig_getmethods__["iinfo"] = _jplephswig.jpl_eph_data_iinfo_get
    if _newclass:iinfo = _swig_property(_jplephswig.jpl_eph_data_iinfo_get, _jplephswig.jpl_eph_data_iinfo_set)
    __swig_setmethods__["ifile"] = _jplephswig.jpl_eph_data_ifile_set
    __swig_getmethods__["ifile"] = _jplephswig.jpl_eph_data_ifile_get
    if _newclass:ifile = _swig_property(_jplephswig.jpl_eph_data_ifile_get, _jplephswig.jpl_eph_data_ifile_set)
    def __init__(self): 
        this = _jplephswig.new_jpl_eph_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jplephswig.delete_jpl_eph_data
    __del__ = lambda self : None;
jpl_eph_data_swigregister = _jplephswig.jpl_eph_data_swigregister
jpl_eph_data_swigregister(jpl_eph_data)

class interpolation_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, interpolation_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, interpolation_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pc"] = _jplephswig.interpolation_info_pc_set
    __swig_getmethods__["pc"] = _jplephswig.interpolation_info_pc_get
    if _newclass:pc = _swig_property(_jplephswig.interpolation_info_pc_get, _jplephswig.interpolation_info_pc_set)
    __swig_setmethods__["vc"] = _jplephswig.interpolation_info_vc_set
    __swig_getmethods__["vc"] = _jplephswig.interpolation_info_vc_get
    if _newclass:vc = _swig_property(_jplephswig.interpolation_info_vc_get, _jplephswig.interpolation_info_vc_set)
    __swig_setmethods__["twot"] = _jplephswig.interpolation_info_twot_set
    __swig_getmethods__["twot"] = _jplephswig.interpolation_info_twot_get
    if _newclass:twot = _swig_property(_jplephswig.interpolation_info_twot_get, _jplephswig.interpolation_info_twot_set)
    __swig_setmethods__["np"] = _jplephswig.interpolation_info_np_set
    __swig_getmethods__["np"] = _jplephswig.interpolation_info_np_get
    if _newclass:np = _swig_property(_jplephswig.interpolation_info_np_get, _jplephswig.interpolation_info_np_set)
    __swig_setmethods__["nv"] = _jplephswig.interpolation_info_nv_set
    __swig_getmethods__["nv"] = _jplephswig.interpolation_info_nv_get
    if _newclass:nv = _swig_property(_jplephswig.interpolation_info_nv_get, _jplephswig.interpolation_info_nv_set)
    def __init__(self): 
        this = _jplephswig.new_interpolation_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jplephswig.delete_interpolation_info
    __del__ = lambda self : None;
interpolation_info_swigregister = _jplephswig.interpolation_info_swigregister
interpolation_info_swigregister(interpolation_info)


def jpl_init_ephemeris(*args):
  return _jplephswig.jpl_init_ephemeris(*args)
jpl_init_ephemeris = _jplephswig.jpl_init_ephemeris

def jpl_close_ephemeris(*args):
  return _jplephswig.jpl_close_ephemeris(*args)
jpl_close_ephemeris = _jplephswig.jpl_close_ephemeris

def jpl_state(*args):
  return _jplephswig.jpl_state(*args)
jpl_state = _jplephswig.jpl_state

def jpl_pleph(*args):
  return _jplephswig.jpl_pleph(*args)
jpl_pleph = _jplephswig.jpl_pleph

def jpl_get_double(*args):
  return _jplephswig.jpl_get_double(*args)
jpl_get_double = _jplephswig.jpl_get_double

def jpl_get_long(*args):
  return _jplephswig.jpl_get_long(*args)
jpl_get_long = _jplephswig.jpl_get_long

def GetJPLEph(*args):
  return _jplephswig.GetJPLEph(*args)
GetJPLEph = _jplephswig.GetJPLEph

def Init_Eph(*args):
  return _jplephswig.Init_Eph(*args)
Init_Eph = _jplephswig.Init_Eph

def CreateCharVector(*args):
  return _jplephswig.CreateCharVector(*args)
CreateCharVector = _jplephswig.CreateCharVector

def CreateDoubleVector(*args):
  return _jplephswig.CreateDoubleVector(*args)
CreateDoubleVector = _jplephswig.CreateDoubleVector

def Delete_CharVector(*args):
  return _jplephswig.Delete_CharVector(*args)
Delete_CharVector = _jplephswig.Delete_CharVector

def Delete_DoubleVector(*args):
  return _jplephswig.Delete_DoubleVector(*args)
Delete_DoubleVector = _jplephswig.Delete_DoubleVector
class JPLEph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JPLEph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JPLEph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _jplephswig.new_JPLEph(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetParameterName(self, *args): return _jplephswig.JPLEph_GetParameterName(self, *args)
    def GetParameterVal(self, *args): return _jplephswig.JPLEph_GetParameterVal(self, *args)
    def Calculate(self, *args): return _jplephswig.JPLEph_Calculate(self, *args)
    def GetValue(self, *args): return _jplephswig.JPLEph_GetValue(self, *args)
    __swig_destroy__ = _jplephswig.delete_JPLEph
    __del__ = lambda self : None;
JPLEph_swigregister = _jplephswig.JPLEph_swigregister
JPLEph_swigregister(JPLEph)

JPL_EPHEM_START_JD = _jplephswig.JPL_EPHEM_START_JD
JPL_EPHEM_END_JD = _jplephswig.JPL_EPHEM_END_JD
JPL_EPHEM_STEP = _jplephswig.JPL_EPHEM_STEP
JPL_EPHEM_N_CONSTANTS = _jplephswig.JPL_EPHEM_N_CONSTANTS
JPL_EPHEM_AU_IN_KM = _jplephswig.JPL_EPHEM_AU_IN_KM
JPL_EPHEM_EARTH_MOON_RATIO = _jplephswig.JPL_EPHEM_EARTH_MOON_RATIO
JPL_EPHEM_EPHEMERIS_VERSION = _jplephswig.JPL_EPHEM_EPHEMERIS_VERSION
JPL_EPHEM_KERNEL_SIZE = _jplephswig.JPL_EPHEM_KERNEL_SIZE
JPL_EPHEM_KERNEL_RECORD_SIZE = _jplephswig.JPL_EPHEM_KERNEL_RECORD_SIZE
JPL_EPHEM_KERNEL_NCOEFF = _jplephswig.JPL_EPHEM_KERNEL_NCOEFF
JPL_EPHEM_KERNEL_SWAP_BYTES = _jplephswig.JPL_EPHEM_KERNEL_SWAP_BYTES
# This file is compatible with both classic and new-style classes.


